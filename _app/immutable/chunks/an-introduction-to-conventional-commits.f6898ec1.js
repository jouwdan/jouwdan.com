import{S as _o,i as Eo,s as bo,k as l,q as r,a as f,l as s,m as n,r as m,h as t,c as d,n as h,b as a,F as o,X as Lt}from"./index.2663ad10.js";function Co(ao){let p,Le,w,Re,De,ae,v,qe,_,Me,Oe,le,I,Te,se,E,lo=`<code class="language-undefined">&lt;type&gt;[optional scope]: &lt;description&gt;

[optional body]

[optional footer(s)]</code>`,ne,H,Se,re,c,g,K,Ve,je,Ue,A,Q,Be,Ge,Fe,P,Z,Ne,We,Xe,L,$,Ye,ze,Je,R,ee,Ke,Qe,Ze,D,te,$e,et,tt,q,oe,ot,it,at,M,ie,lt,st,me,O,nt,fe,T,rt,de,S,mt,ce,b,so='<code class="language-undefined">feat: allow provided config object to extend other configs</code>',ue,C,no='<code class="language-undefined">docs: correct spelling of CHANGELOG</code>',pe,V,ft,he,y,ro='<code class="language-undefined">feat!: send an email to the customer when a product is shipped</code>',ve,j,dt,we,x,mo='<code class="language-undefined">feat(api)!: send an email to the customer when a product is shipped</code>',_e,U,ct,Ee,k,fo=`<code class="language-undefined">fix: prevent racing of requests

Introduce a request id and a reference to latest request. Dismiss
incoming responses other than from latest request.

Remove timeouts which were used to mitigate the racing issue but are
obsolete now.

Story-ref: #1234</code>`,be,B,ut,Ce,G,pt,ye,F,ht,xe,N,vt,ke,W,wt,Ie,X,_t,He,Y,Et,ge,z,bt,Ae,J,Ct;return{c(){p=l("p"),Le=r("As a student, i’ve always wondered if there is a standard around commit messages. I thought it would make sense for them to be standardised, and when I started my new role I learned about "),w=l("a"),Re=r("Conventional Commits"),De=r(" - and it just makes sense! I see a lot of people don’t follow any rules and, when it comes to working with a team, without standardisation the commit log can become quite chaotic and uninformative."),ae=f(),v=l("p"),qe=r("Conventional Commits is a specification for adding human and machine-readable meaning to commit messages. It is a lightweight convention on top of commit messages that provides an easy set of rules to help you create an explicit commit history, making it easier to write automated tools on top of. This convention dovetails with "),_=l("a"),Me=r("SemVer"),Oe=r(", by describing the features, fixes, and breaking changes made in commit messages."),le=f(),I=l("p"),Te=r("Conventional Commits have the following structure:"),se=f(),E=l("pre"),ne=f(),H=l("p"),Se=r("With Conventional Commits, there are multiple types of commit you can make."),re=f(),c=l("ul"),g=l("li"),K=l("code"),Ve=r("feat:"),je=r(" Add a new feature to the codebase (MINOR in semantic versioning)."),Ue=f(),A=l("li"),Q=l("code"),Be=r("fix:"),Ge=r(" Fix a bug (equivalent to a PATCH in Semantic Versioning)."),Fe=f(),P=l("li"),Z=l("code"),Ne=r("docs:"),We=r(" Documentation changes."),Xe=f(),L=l("li"),$=l("code"),Ye=r("style:"),ze=r(" Code style change (semicolon, indentation…)."),Je=f(),R=l("li"),ee=l("code"),Ke=r("refactor:"),Qe=r(" Refactor code without changing public API."),Ze=f(),D=l("li"),te=l("code"),$e=r("perf:"),et=r(" Update code performances."),tt=f(),q=l("li"),oe=l("code"),ot=r("test:"),it=r(" Add test to an existing feature."),at=f(),M=l("li"),ie=l("code"),lt=r("chore:"),st=r(" Update something without impacting the user (ex: bump a dependency in package.json)."),me=f(),O=l("h2"),nt=r("Examples"),fe=f(),T=l("p"),rt=r("Some examples of the above would be"),de=f(),S=l("h4"),mt=r("Commit with no body"),ce=f(),b=l("pre"),ue=f(),C=l("pre"),pe=f(),V=l("h4"),ft=r("Commit with ! to draw attention to breaking change"),he=f(),y=l("pre"),ve=f(),j=l("h4"),dt=r("Commit with scope and ! to draw attention to breaking change"),we=f(),x=l("pre"),_e=f(),U=l("h4"),ct=r("Commit with multi-paragraph body and footer"),Ee=f(),k=l("pre"),be=f(),B=l("h2"),ut=r("Benefits"),Ce=f(),G=l("h4"),pt=r("Readability"),ye=f(),F=l("p"),ht=r("Commits are more descriptive, making it easier for teammates and stakeholders to read and understand them. It also makes it easier to contribute."),xe=f(),N=l("h4"),vt=r("Changelog"),ke=f(),W=l("p"),wt=r("Allows you to automatically generate a changelog."),Ie=f(),X=l("h4"),_t=r("Version Control"),He=f(),Y=l("p"),Et=r("Helps to automatically determine a semantic version bump based on the types of commits landed."),ge=f(),z=l("h4"),bt=r("Revert changes"),Ae=f(),J=l("p"),Ct=r("If only one action is made per commit, it makes it simpler to revert a change or git conflict"),this.h()},l(e){p=s(e,"P",{});var i=n(p);Le=m(i,"As a student, i’ve always wondered if there is a standard around commit messages. I thought it would make sense for them to be standardised, and when I started my new role I learned about "),w=s(i,"A",{href:!0,rel:!0});var Rt=n(w);Re=m(Rt,"Conventional Commits"),Rt.forEach(t),De=m(i," - and it just makes sense! I see a lot of people don’t follow any rules and, when it comes to working with a team, without standardisation the commit log can become quite chaotic and uninformative."),i.forEach(t),ae=d(e),v=s(e,"P",{});var Pe=n(v);qe=m(Pe,"Conventional Commits is a specification for adding human and machine-readable meaning to commit messages. It is a lightweight convention on top of commit messages that provides an easy set of rules to help you create an explicit commit history, making it easier to write automated tools on top of. This convention dovetails with "),_=s(Pe,"A",{href:!0,rel:!0});var Dt=n(_);Me=m(Dt,"SemVer"),Dt.forEach(t),Oe=m(Pe,", by describing the features, fixes, and breaking changes made in commit messages."),Pe.forEach(t),le=d(e),I=s(e,"P",{});var qt=n(I);Te=m(qt,"Conventional Commits have the following structure:"),qt.forEach(t),se=d(e),E=s(e,"PRE",{class:!0});var co=n(E);co.forEach(t),ne=d(e),H=s(e,"P",{});var Mt=n(H);Se=m(Mt,"With Conventional Commits, there are multiple types of commit you can make."),Mt.forEach(t),re=d(e),c=s(e,"UL",{});var u=n(c);g=s(u,"LI",{});var yt=n(g);K=s(yt,"CODE",{});var Ot=n(K);Ve=m(Ot,"feat:"),Ot.forEach(t),je=m(yt," Add a new feature to the codebase (MINOR in semantic versioning)."),yt.forEach(t),Ue=d(u),A=s(u,"LI",{});var xt=n(A);Q=s(xt,"CODE",{});var Tt=n(Q);Be=m(Tt,"fix:"),Tt.forEach(t),Ge=m(xt," Fix a bug (equivalent to a PATCH in Semantic Versioning)."),xt.forEach(t),Fe=d(u),P=s(u,"LI",{});var kt=n(P);Z=s(kt,"CODE",{});var St=n(Z);Ne=m(St,"docs:"),St.forEach(t),We=m(kt," Documentation changes."),kt.forEach(t),Xe=d(u),L=s(u,"LI",{});var It=n(L);$=s(It,"CODE",{});var Vt=n($);Ye=m(Vt,"style:"),Vt.forEach(t),ze=m(It," Code style change (semicolon, indentation…)."),It.forEach(t),Je=d(u),R=s(u,"LI",{});var Ht=n(R);ee=s(Ht,"CODE",{});var jt=n(ee);Ke=m(jt,"refactor:"),jt.forEach(t),Qe=m(Ht," Refactor code without changing public API."),Ht.forEach(t),Ze=d(u),D=s(u,"LI",{});var gt=n(D);te=s(gt,"CODE",{});var Ut=n(te);$e=m(Ut,"perf:"),Ut.forEach(t),et=m(gt," Update code performances."),gt.forEach(t),tt=d(u),q=s(u,"LI",{});var At=n(q);oe=s(At,"CODE",{});var Bt=n(oe);ot=m(Bt,"test:"),Bt.forEach(t),it=m(At," Add test to an existing feature."),At.forEach(t),at=d(u),M=s(u,"LI",{});var Pt=n(M);ie=s(Pt,"CODE",{});var Gt=n(ie);lt=m(Gt,"chore:"),Gt.forEach(t),st=m(Pt," Update something without impacting the user (ex: bump a dependency in package.json)."),Pt.forEach(t),u.forEach(t),me=d(e),O=s(e,"H2",{});var Ft=n(O);nt=m(Ft,"Examples"),Ft.forEach(t),fe=d(e),T=s(e,"P",{});var Nt=n(T);rt=m(Nt,"Some examples of the above would be"),Nt.forEach(t),de=d(e),S=s(e,"H4",{});var Wt=n(S);mt=m(Wt,"Commit with no body"),Wt.forEach(t),ce=d(e),b=s(e,"PRE",{class:!0});var uo=n(b);uo.forEach(t),ue=d(e),C=s(e,"PRE",{class:!0});var po=n(C);po.forEach(t),pe=d(e),V=s(e,"H4",{});var Xt=n(V);ft=m(Xt,"Commit with ! to draw attention to breaking change"),Xt.forEach(t),he=d(e),y=s(e,"PRE",{class:!0});var ho=n(y);ho.forEach(t),ve=d(e),j=s(e,"H4",{});var Yt=n(j);dt=m(Yt,"Commit with scope and ! to draw attention to breaking change"),Yt.forEach(t),we=d(e),x=s(e,"PRE",{class:!0});var vo=n(x);vo.forEach(t),_e=d(e),U=s(e,"H4",{});var zt=n(U);ct=m(zt,"Commit with multi-paragraph body and footer"),zt.forEach(t),Ee=d(e),k=s(e,"PRE",{class:!0});var wo=n(k);wo.forEach(t),be=d(e),B=s(e,"H2",{});var Jt=n(B);ut=m(Jt,"Benefits"),Jt.forEach(t),Ce=d(e),G=s(e,"H4",{});var Kt=n(G);pt=m(Kt,"Readability"),Kt.forEach(t),ye=d(e),F=s(e,"P",{});var Qt=n(F);ht=m(Qt,"Commits are more descriptive, making it easier for teammates and stakeholders to read and understand them. It also makes it easier to contribute."),Qt.forEach(t),xe=d(e),N=s(e,"H4",{});var Zt=n(N);vt=m(Zt,"Changelog"),Zt.forEach(t),ke=d(e),W=s(e,"P",{});var $t=n(W);wt=m($t,"Allows you to automatically generate a changelog."),$t.forEach(t),Ie=d(e),X=s(e,"H4",{});var eo=n(X);_t=m(eo,"Version Control"),eo.forEach(t),He=d(e),Y=s(e,"P",{});var to=n(Y);Et=m(to,"Helps to automatically determine a semantic version bump based on the types of commits landed."),to.forEach(t),ge=d(e),z=s(e,"H4",{});var oo=n(z);bt=m(oo,"Revert changes"),oo.forEach(t),Ae=d(e),J=s(e,"P",{});var io=n(J);Ct=m(io,"If only one action is made per commit, it makes it simpler to revert a change or git conflict"),io.forEach(t),this.h()},h(){h(w,"href","https://www.conventionalcommits.org/en/v1.0.0/"),h(w,"rel","nofollow"),h(_,"href","https://semver.org/"),h(_,"rel","nofollow"),h(E,"class","language-undefined"),h(b,"class","language-undefined"),h(C,"class","language-undefined"),h(y,"class","language-undefined"),h(x,"class","language-undefined"),h(k,"class","language-undefined")},m(e,i){a(e,p,i),o(p,Le),o(p,w),o(w,Re),o(p,De),a(e,ae,i),a(e,v,i),o(v,qe),o(v,_),o(_,Me),o(v,Oe),a(e,le,i),a(e,I,i),o(I,Te),a(e,se,i),a(e,E,i),E.innerHTML=lo,a(e,ne,i),a(e,H,i),o(H,Se),a(e,re,i),a(e,c,i),o(c,g),o(g,K),o(K,Ve),o(g,je),o(c,Ue),o(c,A),o(A,Q),o(Q,Be),o(A,Ge),o(c,Fe),o(c,P),o(P,Z),o(Z,Ne),o(P,We),o(c,Xe),o(c,L),o(L,$),o($,Ye),o(L,ze),o(c,Je),o(c,R),o(R,ee),o(ee,Ke),o(R,Qe),o(c,Ze),o(c,D),o(D,te),o(te,$e),o(D,et),o(c,tt),o(c,q),o(q,oe),o(oe,ot),o(q,it),o(c,at),o(c,M),o(M,ie),o(ie,lt),o(M,st),a(e,me,i),a(e,O,i),o(O,nt),a(e,fe,i),a(e,T,i),o(T,rt),a(e,de,i),a(e,S,i),o(S,mt),a(e,ce,i),a(e,b,i),b.innerHTML=so,a(e,ue,i),a(e,C,i),C.innerHTML=no,a(e,pe,i),a(e,V,i),o(V,ft),a(e,he,i),a(e,y,i),y.innerHTML=ro,a(e,ve,i),a(e,j,i),o(j,dt),a(e,we,i),a(e,x,i),x.innerHTML=mo,a(e,_e,i),a(e,U,i),o(U,ct),a(e,Ee,i),a(e,k,i),k.innerHTML=fo,a(e,be,i),a(e,B,i),o(B,ut),a(e,Ce,i),a(e,G,i),o(G,pt),a(e,ye,i),a(e,F,i),o(F,ht),a(e,xe,i),a(e,N,i),o(N,vt),a(e,ke,i),a(e,W,i),o(W,wt),a(e,Ie,i),a(e,X,i),o(X,_t),a(e,He,i),a(e,Y,i),o(Y,Et),a(e,ge,i),a(e,z,i),o(z,bt),a(e,Ae,i),a(e,J,i),o(J,Ct)},p:Lt,i:Lt,o:Lt,d(e){e&&t(p),e&&t(ae),e&&t(v),e&&t(le),e&&t(I),e&&t(se),e&&t(E),e&&t(ne),e&&t(H),e&&t(re),e&&t(c),e&&t(me),e&&t(O),e&&t(fe),e&&t(T),e&&t(de),e&&t(S),e&&t(ce),e&&t(b),e&&t(ue),e&&t(C),e&&t(pe),e&&t(V),e&&t(he),e&&t(y),e&&t(ve),e&&t(j),e&&t(we),e&&t(x),e&&t(_e),e&&t(U),e&&t(Ee),e&&t(k),e&&t(be),e&&t(B),e&&t(Ce),e&&t(G),e&&t(ye),e&&t(F),e&&t(xe),e&&t(N),e&&t(ke),e&&t(W),e&&t(Ie),e&&t(X),e&&t(He),e&&t(Y),e&&t(ge),e&&t(z),e&&t(Ae),e&&t(J)}}}const xo={title:"An introduction to Conventional Commits",date:"Aug 7, 2022",cover:"https://images.unsplash.com/photo-1556075798-4825dfaaf498?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1476&q=80",excerpt:"Conventional Commits is a specification for adding human and machine-readable meaning to commit messages."};class ko extends _o{constructor(p){super(),Eo(this,p,null,Co,bo,{})}}export{ko as default,xo as metadata};
